{"version":3,"file":"wretch.all.min.js","sources":["../../../src/constants.ts","../../../src/utils.ts","../../../src/config.ts","../../../src/resolver.ts","../../../src/middleware.ts","../../../src/core.ts","../../../src/addons/abort.ts","../../../src/addons/formData.ts","../../../src/addons/formUrl.ts","../../../src/addons/perfs.ts","../../../src/addons/queryString.ts","../../../src/index.all.ts"],"sourcesContent":["export const JSON_MIME = \"application/json\"\nexport const CONTENT_TYPE_HEADER = \"Content-Type\"\nexport const FETCH_ERROR = Symbol()","import * as Constants from \"./constants.js\"\n\nexport function extractContentType(headers: HeadersInit = {}): string | undefined {\n  return Object.entries(headers).find(([k]) =>\n    k.toLowerCase() === Constants.CONTENT_TYPE_HEADER.toLowerCase()\n  )?.[1]\n}\n\nexport function isLikelyJsonMime(value: string): boolean {\n  return /^application\\/.*json.*/.test(value)\n}\n\nexport const mix = function (one: object, two: object, mergeArrays: boolean = false) {\n  if (!one || !two || typeof one !== \"object\" || typeof two !== \"object\")\n    return one\n\n  const clone = { ...one }\n  for (const prop in two) {\n    if (two.hasOwnProperty(prop)) {\n      if (two[prop] instanceof Array && one[prop] instanceof Array) {\n        clone[prop] = mergeArrays ? [...one[prop], ...two[prop]] : two[prop]\n      } else if (typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n        clone[prop] = mix(one[prop], two[prop], mergeArrays)\n      } else {\n        clone[prop] = two[prop]\n      }\n    }\n  }\n\n  return clone\n}\n","import { mix } from \"./utils.js\"\n\ndeclare const global\n\nconst config = {\n  // Default options\n  defaults: {},\n  // Error type\n  errorType: \"text\",\n  // Polyfills\n  polyfills: {\n    // fetch: null,\n    // FormData: null,\n    // URLSearchParams: null,\n    // performance: null,\n    // PerformanceObserver: null,\n    // AbortController: null\n  },\n  polyfill(p: string, { doThrow = true, instance = false } = {}, ...args: any[]) {\n    const res = this.polyfills[p] ||\n      (typeof self !== \"undefined\" ? self[p] : null) ||\n      (typeof global !== \"undefined\" ? global[p] : null)\n    if (doThrow && !res) throw new Error(p + \" is not defined\")\n    return instance && res ? new res(...args) : res\n  }\n}\nexport type Config = typeof config\n\n/**\n * Sets the default fetch options used when creating a Wretch instance.\n * @param defaults New default options\n * @param replace If true, completely replaces the existing options instead of mixing in\n */\nexport function setDefaults(defaults: any, replace = false) {\n  config.defaults = replace ? defaults : mix(config.defaults, defaults)\n}\n\n/**\n * Sets the global polyfills which will be used for every subsequent calls.\n *\n * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n *\n * @param polyfills An object containing the polyfills\n * @param replace If true, replaces the current polyfills instead of mixing in\n */\nexport function setPolyfills(polyfills: any, replace = false) {\n  config.polyfills = replace ? polyfills : mix(config.polyfills, polyfills)\n}\n\n/**\n * Sets the default method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n *\n * If null, defaults to \"text\".\n */\nexport function setErrorType(errorType: string) {\n  config.errorType = errorType\n}\n\nexport default config\n","import { Wretch } from \"./core.js\"\nimport { middlewareHelper } from \"./middleware.js\"\nimport { mix } from \"./utils.js\"\nimport type { WretchResponse, WretchErrorCallback } from \"./types.js\"\nimport { FETCH_ERROR } from \"./constants\"\n\nexport class WretchError extends Error { }\n\nexport interface WretchResponseChain<T, Self = unknown> {\n  wretchRequest: Wretch<T, Self>,\n  fetchRequest: Promise<WretchResponse>,\n\n  /**\n   * Retrieves the raw result as a promise.\n   */\n  res: <Result = WretchResponse>(cb?: (type: WretchResponse) => Result) => Promise<Result>,\n  /**\n   * Retrieves the result as a parsed JSON object.\n   */\n  json: <Result = { [key: string]: any }>(cb?: (type: { [key: string]: any }) => Result) => Promise<Result>,\n  /**\n   * Retrieves the result as a Blob object.\n   */\n  blob: <Result = Blob>(cb?: (type: Blob) => Result) => Promise<Result>,\n  /**\n   * Retrieves the result as a FormData object.\n   */\n  formData: <Result = FormData>(cb?: (type: FormData) => Result) => Promise<Result>,\n  /**\n   * Retrieves the result as an ArrayBuffer object.\n   */\n  arrayBuffer: <Result = ArrayBuffer>(cb?: (type: ArrayBuffer) => Result) => Promise<Result>,\n  /**\n   * Retrieves the result as a string.\n   */\n  text: <Result = string>(cb?: (type: string) => Result) => Promise<Result>,\n\n  /**\n   * Catches an http response with a specific error code or name and performs a callback.\n   */\n  error: (this: Self & WretchResponseChain<T, Self>, code: (number | string | symbol), cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches a bad request (http code 400) and performs a callback.\n   */\n  badRequest: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches an unauthorized request (http code 401) and performs a callback.\n   */\n  unauthorized: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches a forbidden request (http code 403) and performs a callback.\n   */\n  forbidden: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches a \"not found\" request (http code 404) and performs a callback.\n   */\n  notFound: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches a timeout (http code 408) and performs a callback.\n   */\n  timeout: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches an internal server error (http code 500) and performs a callback.\n   */\n  internalError: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches errors thrown when calling the fetch function and performs a callback.\n   */\n  fetchError: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n}\n\nexport const resolver = <T, Chain>(wretch: Wretch<T, Chain>) => {\n  const {\n    _url: url,\n    _options: opts,\n    _config: config,\n    _catchers: _catchers,\n    _resolvers: resolvers,\n    _middlewares: middlewares,\n    _addons: addons\n  } = wretch\n\n  const catchers = new Map(_catchers)\n  const finalOptions = mix(config.defaults, opts)\n  addons.forEach(addon => addon.beforeRequest && addon.beforeRequest(wretch, finalOptions))\n  // The generated fetch request\n  const fetchRequest = middlewareHelper(middlewares)(config.polyfill(\"fetch\"))(url, finalOptions)\n  // Throws on an http error\n  const referenceError = new Error()\n  const throwingPromise: Promise<void | WretchResponse> = fetchRequest\n    .catch(error => {\n      throw { __wrap: error }\n    })\n    .then(response => {\n      if (!response.ok) {\n        const err = new WretchError()\n        // Enhance the error object\n        err[\"cause\"] = referenceError\n        err.stack = err.stack + \"\\nCAUSE: \" + referenceError.stack\n        err[\"response\"] = response\n        if (response.type === \"opaque\") {\n          throw err\n        }\n        return response[config.errorType]().then((body: string) => {\n          err.message = body\n          err[config.errorType] = body\n          err[\"status\"] = response.status\n          throw err\n        })\n      }\n      return response\n    })\n  // Wraps the Promise in order to dispatch the error to a matching catcher\n  const catchersWrapper = <T>(promise: Promise<T>): Promise<void | T> => {\n    return promise.catch(err => {\n      const error = err.__wrap || err\n\n      const catcher =\n        err.__wrap && catchers.has(FETCH_ERROR) ? catchers.get(FETCH_ERROR) :\n          (catchers.get(error.status) || catchers.get(error.name))\n\n      if (catcher)\n        return catcher(error, wretch)\n\n      throw error\n    })\n  }\n  // Enforces the proper promise type when a body parsing method is called.\n  type BodyParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Result>\n  const bodyParser: BodyParser = funName => cb => funName ?\n    // If a callback is provided, then callback with the body result otherwise return the parsed body itself.\n    catchersWrapper(throwingPromise.then(_ => _ && _[funName]()).then(_ => cb ? cb(_) : _)) :\n    // No body parsing method - return the response\n    catchersWrapper(throwingPromise.then(_ => cb ? cb(_ as any) : _))\n\n  const responseChain: WretchResponseChain<T> = {\n    wretchRequest: wretch,\n    fetchRequest,\n    res: bodyParser<WretchResponse>(null),\n    json: bodyParser<any>(\"json\"),\n    blob: bodyParser<Blob>(\"blob\"),\n    formData: bodyParser<FormData>(\"formData\"),\n    arrayBuffer: bodyParser<ArrayBuffer>(\"arrayBuffer\"),\n    text: bodyParser<string>(\"text\"),\n    error(errorId, cb) {\n      catchers.set(errorId, cb)\n      return this\n    },\n    badRequest(cb) { return this.error(400, cb) },\n    unauthorized(cb) { return this.error(401, cb) },\n    forbidden(cb) { return this.error(403, cb) },\n    notFound(cb) { return this.error(404, cb) },\n    timeout(cb) { return this.error(408, cb) },\n    internalError(cb) { return this.error(500, cb) },\n    fetchError(cb) { return this.error(FETCH_ERROR, cb) },\n  }\n\n  const enhancedResponseChain: Chain & WretchResponseChain<T, Chain> = addons.reduce((chain, addon) => ({\n    ...chain,\n    ...(addon.resolver as any)\n  }), responseChain)\n\n  return resolvers.reduce((chain, r) => r(chain, wretch), enhancedResponseChain) as (Chain & WretchResponseChain<T, Chain> & Promise<any>)\n}\n","import { WretchOptions } from \"./types.js\"\nimport { WretchResponse } from \"./types.js\"\n\nexport type Middleware = (options?: { [key: string]: any }) => ConfiguredMiddleware\nexport type ConfiguredMiddleware = (next: FetchLike) => FetchLike\nexport type FetchLike = (url: string, opts: WretchOptions) => Promise<WretchResponse>\n\nexport const middlewareHelper = (middlewares: ConfiguredMiddleware[]) => (fetchFunction: FetchLike): FetchLike => {\n  return (\n    middlewares.length === 0 ?\n      fetchFunction :\n      middlewares.length === 1 ?\n        middlewares[0](fetchFunction) :\n        middlewares.reduceRight((acc, curr, idx): any =>\n          (idx === middlewares.length - 2) ? curr(acc(fetchFunction)) : curr(acc as any)\n        )\n  ) as FetchLike\n}\n","import { mix, extractContentType, isLikelyJsonMime } from \"./utils.js\"\nimport * as Constants from \"./constants.js\"\nimport { resolver } from \"./resolver.js\"\nimport config from \"./config.js\"\nimport type { Config } from \"./config.js\"\nimport type { WretchError, WretchOptions, WretchDeferredCallback, WretchAddon } from \"./types.js\"\nimport type { WretchResponseChain } from \"./resolver.js\"\nimport type { ConfiguredMiddleware } from \"./middleware.js\"\n\n/**\n * The Wretch object used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretch object.\n */\nexport interface Wretch<Self = unknown, Chain = unknown> {\n  _url: string,\n  _options: WretchOptions,\n  _config: Config,\n  _catchers: Map<number | string | symbol, (error: WretchError, originalRequest: Wretch<Self>) => void>\n  _resolvers: ((resolver: Chain & WretchResponseChain<Self, Chain>, originalRequest: Wretch<Self>) => any)[]\n  _deferredChain: WretchDeferredCallback<Self, Chain>[]\n  _middlewares: ConfiguredMiddleware[]\n  _addons: WretchAddon<unknown, Chain>[]\n\n  /**\n   * @private\n   */\n  clone(args: Record<string, any>): this\n\n  /**\n   * Register an Addon to enhance the wretch or response objects.\n   */\n  addon: <W, R>(addon: WretchAddon<W, R>) => W & Self & Wretch<Self & W, Chain & R>\n\n  /**\n   * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n   *\n   * Persists for every subsequent requests.\n   *\n   * Default is \"text\".\n   */\n  errorType(this: Self & Wretch<Self, Chain>, method: string): this\n\n  /**\n   * Sets the non-global polyfills which will be used for every subsequent calls.\n   *\n   * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n   *\n   * @param polyfills - An object containing the polyfills\n   * @param replace - If true, replaces the current polyfills instead of mixing in\n   */\n  polyfills(this: Self & Wretch<Self, Chain>, polyfills: Partial<typeof config.polyfills>): this\n\n  /**\n   * Returns a new Wretch object with the argument url appended and the same options.\n   * @param url - Url segment\n   * @param replace - If true, replaces the current url instead of appending\n   */\n  url(this: Self & Wretch<Self, Chain>, url: string, replace?: boolean): this\n\n  /**\n   * Returns a new Wretch object with the same url and new options.\n   * @param options - New options\n   * @param replace - If true, replaces the existing options\n   */\n  options(this: Self & Wretch<Self, Chain>, options: WretchOptions, replace?: boolean): this\n\n  /**\n   * Set request headers.\n   * @param headerValues - An object containing header keys and values\n   */\n  headers(this: Self & Wretch<Self, Chain>, headerValues: HeadersInit): this\n\n  /**\n   * Shortcut to set the \"Accept\" header.\n   * @param headerValue - Header value\n   */\n  accept(this: Self & Wretch<Self, Chain>, headerValue: string): this\n\n  /**\n   * Shortcut to set the \"Content-Type\" header.\n   * @param headerValue - Header value\n   */\n  content(this: Self & Wretch<Self, Chain>, headerValue: string): this\n\n  /**\n   * Shortcut to set the \"Authorization\" header.\n   * @param headerValue - Header value\n   */\n  auth(this: Self & Wretch<Self, Chain>, headerValue: string): this\n\n  /**\n   * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n   * @param errorId - Error code or name\n   * @param catcher - The catcher method\n   */\n  catcher(this: Self & Wretch<Self, Chain>, errorId: number | string, catcher: (error: WretchError, originalRequest: Wretch<Self>) => any): this\n\n  /**\n   * Defer wretch methods that will be chained and called just before the request is performed.\n   */\n  defer(this: Self & Wretch<Self, Chain>, callback: WretchDeferredCallback<Self, Chain>, clear?: boolean): this\n\n  /**\n   * Program a resolver to perform response chain tasks automatically.\n   * @param resolver - Resolver callback\n   */\n  resolve(this: Self & Wretch<Self, Chain>, resolver: (chain: Chain & WretchResponseChain<Self, Chain>, originalRequest: Wretch<Self>) => WretchResponseChain<Self, Chain> | Promise<any>, clear?: boolean): this\n\n  /**\n   * Add middlewares to intercept a request before being sent.\n   */\n  middlewares(this: Self & Wretch<Self, Chain>, middlewares: ConfiguredMiddleware[], clear?: boolean): this\n\n  method(this: Self & Wretch<Self, Chain>, method: string, url?: string, body?: any): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a get request.\n   */\n  get(this: Self & Wretch<Self, Chain>, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a delete request.\n   */\n  delete(this: Self & Wretch<Self, Chain>, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a put request.\n   */\n  put(this: Self & Wretch<Self, Chain>, body?: any, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a post request.\n   */\n  post(this: Self & Wretch<Self, Chain>, body?: any, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a patch request.\n   */\n  patch(this: Self & Wretch<Self, Chain>, body?: any, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a head request.\n   */\n  head(this: Self & Wretch<Self, Chain>, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs an options request\n   */\n  opts(this: Self & Wretch<Self, Chain>, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Replay a request.\n   */\n  replay(this: Self & Wretch<Self, Chain>, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n\n  /**\n   * Sets the request body with any content.\n   * @param contents - The body contents\n   */\n  body(this: Self & Wretch<Self, Chain>, contents: any): this\n\n  /**\n   * Sets the content type header, stringifies an object and sets the request body.\n   * @param jsObject - An object which will be serialized into a JSON\n   * @param contentType - A custom content type.\n   */\n  json(this: Self & Wretch<Self, Chain>, jsObject: object, contentType?: string): this\n}\n\nexport const core: Wretch = {\n  _url: \"\",\n  _options: {},\n  _config: config,\n  _catchers: new Map(),\n  _resolvers: [],\n  _deferredChain: [],\n  _middlewares: [],\n  _addons: [],\n\n  clone(properties) {\n    return {\n      ...this,\n      ...properties\n    }\n  },\n  addon(addon) {\n    return this.clone({ _addons: [...this._addons, addon], ...addon.wretch })\n  },\n  errorType(errorType: string) {\n    return this.clone({\n      _config: {\n        ...this._config,\n        errorType\n      }\n    })\n  },\n  polyfills(polyfills, replace = false) {\n    return this.clone({\n      _config: {\n        ...this._config,\n        polyfills: replace ? polyfills : mix(this._config.polyfills, polyfills)\n      }\n    })\n  },\n  url(_url, replace = false) {\n    if (replace)\n      return this.clone({ _url })\n    const split = this._url.split(\"?\")\n    return this.clone({\n      _url: split.length > 1 ?\n        split[0] + _url + \"?\" + split[1] :\n        this._url + _url\n    })\n  },\n  options(options, replace = false) {\n    return this.clone({ _options: replace ? options : mix(this._options, options) })\n  },\n  headers(headerValues) {\n    return this.clone({ _options: mix(this._options, { headers: headerValues || {} }) })\n  },\n  accept(headerValue) {\n    return this.headers({ Accept: headerValue })\n  },\n  content(headerValue) {\n    return this.headers({ [Constants.CONTENT_TYPE_HEADER]: headerValue })\n  },\n  auth(headerValue) {\n    return this.headers({ Authorization: headerValue })\n  },\n  catcher(errorId, catcher) {\n    const newMap = new Map(this._catchers)\n    newMap.set(errorId, catcher)\n    return this.clone({ _catchers: newMap })\n  },\n  resolve(resolver, clear: boolean = false) {\n    return this.clone({ _resolvers: clear ? [resolver] : [...this._resolvers, resolver] })\n  },\n  defer(callback, clear = false) {\n    return this.clone({\n      _deferredChain: clear ? [callback] : [...this._deferredChain, callback]\n    })\n  },\n  middlewares(middlewares, clear = false) {\n    return this.clone({\n      _middlewares: clear ? middlewares : [...this._middlewares, ...middlewares]\n    })\n  },\n  method(method: string, url = \"\", body = null) {\n    let base = this.url(url).options({ method })\n    // \"Jsonify\" the body if it is an object and if it is likely that the content type targets json.\n    const contentType = extractContentType(base._options.headers)\n    const jsonify = typeof body === \"object\" && (!base._options.headers || !contentType || isLikelyJsonMime(contentType))\n    base =\n      !body ? base :\n        jsonify ? base.json(body, contentType) :\n          base.body(body)\n    return resolver(\n      base\n        ._deferredChain\n        .reduce((acc: Wretch, curr) => curr(acc, acc._url, acc._options), base)\n    )\n  },\n  get(url = \"\") {\n    return this.method(\"GET\", url)\n  },\n  delete(url = \"\") {\n    return this.method(\"DELETE\", url)\n  },\n  put(body, url = \"\") {\n    return this.method(\"PUT\", url, body)\n  },\n  post(body, url = \"\") {\n    return this.method(\"POST\", url, body)\n  },\n  patch(body, url = \"\") {\n    return this.method(\"PATCH\", url, body)\n  },\n  head(url = \"\") {\n    return this.method(\"HEAD\", url)\n  },\n  opts(url = \"\") {\n    return this.method(\"OPTIONS\", url)\n  },\n  replay() {\n    return this.method(this._options.method)\n  },\n  body(contents) {\n    return this.clone({ _options: { ...this._options, body: contents } })\n  },\n  json(jsObject, contentType) {\n    const currentContentType = extractContentType(this._options.headers)\n    return this.content(\n      contentType ||\n      isLikelyJsonMime(currentContentType) && currentContentType ||\n      Constants.JSON_MIME\n    ).body(JSON.stringify(jsObject))\n  }\n}","import type { WretchResponseChain } from \"../resolver.js\"\nimport type { Wretch, WretchAddon, WretchErrorCallback } from \"../types.js\"\n\nexport interface AbortWretch {\n  /**\n   * Associates a custom signal with the request.\n   * @param controller - An AbortController\n   */\n  signal: <T extends AbortWretch, C>(this: T & Wretch<T, C>, controller: AbortController) => this\n}\n\nexport interface AbortResolver {\n  /**\n   * Aborts the request after a fixed time.\n   *\n   * @param time - Time in milliseconds\n   * @param controller - A custom controller\n   */\n  setTimeout: <T, C extends AbortResolver>(this: C & WretchResponseChain<T, C>, time: number, controller?: AbortController) => this\n  /**\n   * Returns the automatically generated AbortController alongside the current wretch response as a pair.\n   */\n  controller: <T, C extends AbortResolver>(this: C & WretchResponseChain<T, C>) => [any, this]\n  /**\n   * Catches an AbortError and performs a callback.\n   */\n  onAbort: <T, C extends AbortResolver>(this: C & WretchResponseChain<T, C>, cb: WretchErrorCallback<T, C>) => this\n}\n\n/**\n * Adds the ability to abort requests using AbortController and signals under the hood.\n *\n * ```js\n * import AbortAddon from \"wetch/addons/abort\"\n *\n * wretch().addon(AbortAddon())\n * ```\n */\nconst abort: () => WretchAddon<AbortWretch, AbortResolver> = () => {\n  let timeout = null\n  let fetchController = null\n  return {\n    beforeRequest(wretch, options) {\n      fetchController = wretch._config.polyfill(\"AbortController\", { doThrow: false, instance: true })\n      if (!options[\"signal\"] && fetchController) {\n        options[\"signal\"] = fetchController.signal\n      }\n      timeout = {\n        ref: null,\n        clear() {\n          if (timeout.ref) {\n            clearTimeout(timeout.ref)\n            timeout.ref = null\n          }\n        }\n      }\n    },\n    wretch: {\n      signal(controller) {\n        return this.clone({ _options: { ...this._options, signal: controller.signal } })\n      },\n    },\n    resolver: {\n      setTimeout(time, controller = fetchController) {\n        timeout.clear()\n        timeout.ref = setTimeout(() => controller.abort(), time)\n        return this\n      },\n      controller() { return [fetchController, this] },\n      onAbort(cb) { return this.error(\"AbortError\", cb) }\n    },\n  }\n}\n\nexport default abort","import type { Wretch } from \"../core.js\"\nimport type { Config } from \"../config.js\"\nimport type { WretchAddon } from \"../types.js\"\n\nfunction convertFormData(\n  formObject: object,\n  recursive: string[] | boolean = false,\n  config: Config,\n  formData = config.polyfill(\"FormData\", { instance: true }),\n  ancestors = [],\n) {\n  Object.entries(formObject).forEach(([key, value]) => {\n    let formKey = ancestors.reduce((acc, ancestor) => (\n      acc ? `${acc}[${ancestor}]` : ancestor\n    ), null)\n    formKey = formKey ? `${formKey}[${key}]` : key\n    if (value instanceof Array) {\n      for (const item of value)\n        formData.append(formKey, item)\n    } else if (\n      recursive &&\n      typeof value === \"object\" &&\n      (\n        !(recursive instanceof Array) ||\n        !recursive.includes(key)\n      )\n    ) {\n      if (value !== null) {\n        convertFormData(value, recursive, config, formData, [...ancestors, key])\n      }\n    } else {\n      formData.append(formKey, value)\n    }\n  })\n\n  return formData\n}\n\nexport interface FormDataAddon {\n  /**\n   * Converts the javascript object to a FormData and sets the request body.\n   * @param formObject - An object which will be converted to a FormData\n   * @param recursive - If `true`, will recurse through all nested objects\n   * Can be set as an array of string to exclude specific keys.\n   * @see https://github.com/elbywan/wretch/issues/68 for more details.\n   */\n  formData<T extends FormDataAddon, C>(this: T & Wretch<T, C>, formObject: object, recursive?: string[] | boolean): this\n}\n\n/**\n * Adds the ability to convert a an object to a FormData and use it as a request body.\n *\n * ```js\n * import FormDataAddon from \"wretch/addons/formData\"\n *\n * wretch().addon(FormDataAddon)\n * ```\n */\nconst formData: WretchAddon<FormDataAddon> = {\n  wretch: {\n    formData(formObject, recursive = false) {\n      return this.body(convertFormData(formObject, recursive, this._config))\n    }\n  }\n}\n\nexport default formData","import type { Wretch } from \"../core.js\"\nimport type { WretchAddon } from \"../types.js\"\n\nfunction encodeQueryValue(key: string, value: unknown) {\n  return encodeURIComponent(key) +\n    \"=\" +\n    encodeURIComponent(\n      typeof value === \"object\" ?\n        JSON.stringify(value) :\n        \"\" + value\n    )\n}\nfunction convertFormUrl(formObject: object) {\n  return Object.keys(formObject)\n    .map(key => {\n      const value = formObject[key]\n      if (value instanceof Array) {\n        return value.map(v => encodeQueryValue(key, v)).join(\"&\")\n      }\n      return encodeQueryValue(key, value)\n    })\n    .join(\"&\")\n}\n\nexport interface FormUrlAddon {\n  /**\n   * Converts the input to an url encoded string and sets the content-type header and body.\n   * If the input argument is already a string, skips the conversion part.\n   *\n   * @param input - An object to convert into an url encoded string or an already encoded string\n   */\n  formUrl<T extends FormUrlAddon, C>(this: T & Wretch<T, C>, input: (object | string)): this\n}\n\n/**\n * Adds the ability to convert a an object to a FormUrl and use it as a request body.\n *\n * ```js\n * import FormUrlAddon from \"wretch/addons/formUrl\"\n *\n * wretch().addon(FormUrlAddon)\n * ```\n */\nconst formUrl: WretchAddon<FormUrlAddon> = {\n  wretch: {\n    formUrl(input) {\n      return this\n        .body(typeof input === \"string\" ? input : convertFormUrl(input))\n        .content(\"application/x-www-form-urlencoded\")\n    }\n  }\n}\n\nexport default formUrl","import type { WretchResponseChain } from \"../resolver.js\"\nimport type { WretchAddon } from \"../types.js\"\n\nconst onMatch = (entries, name, callback, _performance) => {\n  if (!entries.getEntriesByName)\n    return false\n  const matches = entries.getEntriesByName(name)\n  if (matches && matches.length > 0) {\n    callback(matches.reverse()[0])\n    if (_performance.clearMeasures)\n      _performance.clearMeasures(name)\n    utils.callbacks.delete(name)\n\n    if (utils.callbacks.size < 1) {\n      utils.observer.disconnect()\n      if (_performance.clearResourceTimings) {\n        _performance.clearResourceTimings()\n      }\n    }\n    return true\n  }\n  return false\n}\n\nconst lazyObserver = (_performance, _observer) => {\n  if (!utils.observer && _performance && _observer) {\n    utils.observer = new _observer(entries => {\n      utils.callbacks.forEach((callback, name) => {\n        onMatch(entries, name, callback, _performance)\n      })\n    })\n    if (_performance.clearResourceTimings)\n      _performance.clearResourceTimings()\n  }\n  return utils.observer\n}\n\nconst utils = {\n  callbacks: new Map(),\n  observer: null,\n  observe: (name, callback, config) => {\n    if (!name || !callback)\n      return\n\n    const _performance = config.polyfill(\"performance\", { doThrow: false })\n    const _observer = config.polyfill(\"PerformanceObserver\", { doThrow: false })\n\n    if (!lazyObserver(_performance, _observer))\n      return\n\n    if (!onMatch(_performance, name, callback, _performance)) {\n      if (utils.callbacks.size < 1)\n        utils.observer.observe({ entryTypes: [\"resource\", \"measure\"] })\n      utils.callbacks.set(name, callback)\n    }\n\n  }\n}\n\nexport interface PerfsAddon {\n  /**\n   * Performs a callback on the API performance timings of the request.\n   *\n   * Warning: Still experimental on browsers and node.js\n   */\n  perfs: <T, C extends PerfsAddon>(this: C & WretchResponseChain<T, C>, cb?: (timing: any) => void) => this,\n}\n\n/**\n * Adds the ability to measure requests using the Performance Timings API.\n *\n * ```js\n * import PerfsAddon from \"wretch/addons/perfs\"\n *\n * wretch().addon(PerfsAddon())\n * ```\n */\nconst perfs: () => WretchAddon<unknown, PerfsAddon> = () => ({\n  resolver: {\n    perfs(cb) {\n      this.fetchRequest.then(res => utils.observe(res.url, cb, this.wretchRequest._config)).catch(() => {/* swallow */ })\n      return this\n    },\n  }\n})\n\nexport default perfs","import type { Wretch, Config, WretchAddon } from \"../types.js\"\n\nconst appendQueryParams = (url: string, qp: object | string, replace: boolean, config: Config) => {\n  let queryString: string\n\n  if (typeof qp === \"string\") {\n    queryString = qp\n  } else {\n    const usp = config.polyfill(\"URLSearchParams\", { instance: true })\n    for (const key in qp) {\n      if (qp[key] instanceof Array) {\n        for (const val of qp[key])\n          usp.append(key, val)\n      } else {\n        usp.append(key, qp[key])\n      }\n    }\n    queryString = usp.toString()\n  }\n\n  const split = url.split(\"?\")\n\n  if (!queryString)\n    return replace ? split[0] : url\n\n  if (replace || split.length < 2)\n    return split[0] + \"?\" + queryString\n\n  return url + \"&\" + queryString\n}\n\nexport interface QueryStringAddon {\n  /**\n   * Converts a javascript object to query parameters,\n   * then appends this query string to the current url.\n   *\n   * If given a string, use the string as the query verbatim.\n   *\n   * ```\n   * import QueryAddon from \"wretch/addons/queryString\"\n   *\n   * let w = wretch(\"http://example.com\").addon(QueryAddon) // url is http://example.com\n   *\n   * // Chain query calls\n   * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n   * w = w.query(\"foo-bar-baz-woz\") // url is now http://example.com?a=1&b=2&foo-bar-baz-woz\n   *\n   * // Pass true as the second argument to replace existing query parameters\n   * w = w.query(\"c=3&d=4\", true) // url is now http://example.com?c=3&d=4\n   * ```\n   *\n   * @param qp - An object which will be converted, or a string which will be used verbatim.\n   */\n  query<T extends QueryStringAddon, C>(this: T & Wretch<T, C>, qp: object | string, replace?: boolean): this\n}\n\n/**\n * Adds the ability to append query parameters from a javascript object.\n *\n * ```js\n * import QueryAddon from \"wretch/addons/queryString\"\n *\n * wretch().addon(QueryAddon)\n * ```\n */\nconst queryString: WretchAddon<QueryStringAddon> = {\n  wretch: {\n    query(qp, replace = false) {\n      return this.clone({ _url: appendQueryParams(this._url, qp, replace, this._config) })\n    }\n  }\n}\n\nexport default queryString","import { setDefaults, setErrorType, setPolyfills } from \"./config.js\"\nimport { core } from \"./core.js\"\nimport * as Addons from \"./addons/index.js\"\n\nfunction factory(_url = \"\", _options = {}) {\n  return core\n    .clone({ _url, _options })\n    .addon(Addons.abortAddon())\n    .addon(Addons.formDataAddon)\n    .addon(Addons.formUrlAddon)\n    .addon(Addons.perfsAddon())\n    .addon(Addons.queryStringAddon)\n}\n\nfactory[\"default\"] = factory\nfactory.defaults = setDefaults\nfactory.errorType = setErrorType\nfactory.polyfills = setPolyfills\nexport default factory"],"names":["CONTENT_TYPE_HEADER","FETCH_ERROR","Symbol","extractContentType","headers","_a","Object","entries","find","k","toLowerCase","Constants.CONTENT_TYPE_HEADER","isLikelyJsonMime","value","test","mix","one","two","mergeArrays","clone","prop","hasOwnProperty","Array","config","defaults","errorType","polyfills","polyfill","p","doThrow","instance","args","res","this","self","global","Error","WretchError","resolver","wretch","_url","url","_options","opts","_config","_catchers","_resolvers","resolvers","_middlewares","middlewares","_addons","addons","catchers","Map","finalOptions","forEach","addon","beforeRequest","fetchRequest","fetchFunction","length","reduceRight","acc","curr","idx","middlewareHelper","referenceError","throwingPromise","catch","error","__wrap","then","response","ok","err","stack","type","body","message","status","catchersWrapper","promise","catcher","has","get","name","bodyParser","funName","cb","_","responseChain","wretchRequest","json","blob","formData","arrayBuffer","text","errorId","set","badRequest","unauthorized","forbidden","notFound","timeout","internalError","fetchError","enhancedResponseChain","reduce","chain","r","core","_deferredChain","properties","replace","split","options","headerValues","accept","headerValue","Accept","content","auth","Authorization","newMap","resolve","clear","defer","callback","method","base","contentType","jsonify","delete","put","post","patch","head","replay","contents","jsObject","currentContentType","JSON","stringify","abort","fetchController","signal","ref","clearTimeout","controller","setTimeout","time","onAbort","convertFormData","formObject","recursive","ancestors","key","formKey","ancestor","item","append","includes","encodeQueryValue","encodeURIComponent","formUrl","input","keys","map","v","join","onMatch","_performance","getEntriesByName","matches","reverse","clearMeasures","utils","callbacks","size","observer","disconnect","clearResourceTimings","observe","_observer","lazyObserver","entryTypes","perfs","appendQueryParams","qp","queryString","usp","val","toString","query","factory","Addons.abortAddon","Addons.formDataAddon","Addons.formUrlAddon","Addons.perfsAddon","Addons.queryStringAddon"],"mappings":"uOAAO,MACMA,EAAsB,eACtBC,EAAcC,SCAX,SAAAC,EAAmBC,EAAuB,UACxD,OAEI,QAFGC,EAAAC,OAAOC,QAAQH,GAASI,MAAK,EAAEC,KACpCA,EAAEC,gBAAkBC,EAA8BD,uBAChD,IAAAL,OAAA,EAAAA,EAAA,GAGA,SAAUO,EAAiBC,GAC/B,MAAO,yBAAyBC,KAAKD,GAGhC,MAAME,EAAM,SAAUC,EAAaC,EAAaC,GAAuB,GAC5E,IAAKF,IAAQC,GAAsB,iBAARD,GAAmC,iBAARC,EACpD,OAAOD,EAET,MAAMG,EAAQ,IAAKH,GACnB,IAAK,MAAMI,KAAQH,EACbA,EAAII,eAAeD,KACjBH,EAAIG,aAAiBE,OAASN,EAAII,aAAiBE,MACrDH,EAAMC,GAAQF,EAAc,IAAIF,EAAII,MAAUH,EAAIG,IAASH,EAAIG,GACjC,iBAAdH,EAAIG,IAA2C,iBAAdJ,EAAII,GACrDD,EAAMC,GAAQL,EAAIC,EAAII,GAAOH,EAAIG,GAAOF,GAExCC,EAAMC,GAAQH,EAAIG,IAKxB,OAAOD,GCzBHI,EAAS,CAEbC,SAAU,GAEVC,UAAW,OAEXC,UAAW,GAQXC,SAASC,GAAWC,QAAEA,GAAU,EAAIC,SAAEA,GAAW,GAAU,MAAOC,GAChE,MAAMC,EAAMC,KAAKP,UAAUE,KACR,oBAATM,KAAuBA,KAAKN,GAAK,QACtB,oBAAXO,OAAyBA,OAAOP,GAAK,MAC/C,GAAIC,IAAYG,EAAK,MAAM,IAAII,MAAMR,EAAI,mBACzC,OAAOE,GAAYE,EAAM,IAAIA,KAAOD,GAAQC,ICjB1C,MAAOK,UAAoBD,OAiE1B,MAAME,EAAsBC,IACjC,MACEC,KAAMC,EACNC,SAAUC,EACVC,QAASrB,EACTsB,UAAWA,EACXC,WAAYC,EACZC,aAAcC,EACdC,QAASC,GACPZ,EAEEa,EAAW,IAAIC,IAAIR,GACnBS,EAAevC,EAAIQ,EAAOC,SAAUmB,GAC1CQ,EAAOI,SAAQC,GAASA,EAAMC,eAAiBD,EAAMC,cAAclB,EAAQe,KAE3E,MAAMI,EC/EwB,CAACT,GAAyCU,GAE/C,IAAvBV,EAAYW,OACVD,EACuB,IAAvBV,EAAYW,OACVX,EAAY,GAAGU,GACfV,EAAYY,aAAY,CAACC,EAAKC,EAAMC,IACjCA,IAAQf,EAAYW,OAAS,EAAKG,EAAKD,EAAIH,IAAkBI,EAAKD,KDwEtDG,CAAiBhB,EAAjBgB,CAA8B1C,EAAOI,SAAS,SAA9CsC,CAAwDxB,EAAKa,GAE5EY,EAAiB,IAAI9B,MACrB+B,EAAkDT,EACrDU,OAAMC,IACL,KAAM,CAAEC,OAAQD,MAEjBE,MAAKC,IACJ,IAAKA,EAASC,GAAI,CAChB,MAAMC,EAAM,IAAIrC,EAKhB,GAHAqC,EAAW,MAAIR,EACfQ,EAAIC,MAAQD,EAAIC,MAAQ,YAAcT,EAAeS,MACrDD,EAAc,SAAIF,EACI,WAAlBA,EAASI,KACX,MAAMF,EAER,OAAOF,EAASjD,EAAOE,aAAa8C,MAAMM,IAIxC,MAHAH,EAAII,QAAUD,EACdH,EAAInD,EAAOE,WAAaoD,EACxBH,EAAY,OAAIF,EAASO,OACnBL,KAGV,OAAOF,KAGLQ,EAAsBC,GACnBA,EAAQb,OAAMM,IACnB,MAAML,EAAQK,EAAIJ,QAAUI,EAEtBQ,EACJR,EAAIJ,QAAUlB,EAAS+B,IAAIlF,GAAemD,EAASgC,IAAInF,GACpDmD,EAASgC,IAAIf,EAAMU,SAAW3B,EAASgC,IAAIf,EAAMgB,MAEtD,GAAIH,EACF,OAAOA,EAAQb,EAAO9B,GAExB,MAAM8B,KAKJiB,EAAyBC,GAAWC,GAExCR,EAF8CO,EAE9BpB,EAAgBI,MAAKkB,GAAKA,GAAKA,EAAEF,OAAYhB,MAAKkB,GAAKD,EAAKA,EAAGC,GAAKA,IAEpEtB,EAAgBI,MAAKkB,GAAKD,EAAKA,EAAGC,GAAYA,KAE1DC,EAAwC,CAC5CC,cAAepD,EACfmB,aAAAA,EACA1B,IAAKsD,EAA2B,MAChCM,KAAMN,EAAgB,QACtBO,KAAMP,EAAiB,QACvBQ,SAAUR,EAAqB,YAC/BS,YAAaT,EAAwB,eACrCU,KAAMV,EAAmB,QACzBjB,MAAM4B,EAAST,GAEb,OADApC,EAAS8C,IAAID,EAAST,GACfvD,MAETkE,WAAWX,GAAM,OAAOvD,KAAKoC,MAAM,IAAKmB,IACxCY,aAAaZ,GAAM,OAAOvD,KAAKoC,MAAM,IAAKmB,IAC1Ca,UAAUb,GAAM,OAAOvD,KAAKoC,MAAM,IAAKmB,IACvCc,SAASd,GAAM,OAAOvD,KAAKoC,MAAM,IAAKmB,IACtCe,QAAQf,GAAM,OAAOvD,KAAKoC,MAAM,IAAKmB,IACrCgB,cAAchB,GAAM,OAAOvD,KAAKoC,MAAM,IAAKmB,IAC3CiB,WAAWjB,GAAM,OAAOvD,KAAKoC,MAAMpE,EAAauF,KAG5CkB,EAA+DvD,EAAOwD,QAAO,CAACC,EAAOpD,KAAW,IACjGoD,KACCpD,EAAMlB,YACRoD,GAEJ,OAAO3C,EAAU4D,QAAO,CAACC,EAAOC,IAAMA,EAAED,EAAOrE,IAASmE,IEA7CI,EAAe,CAC1BtE,KAAM,GACNE,SAAU,GACVE,QAASrB,EACTsB,UAAW,IAAIQ,IACfP,WAAY,GACZiE,eAAgB,GAChB/D,aAAc,GACdE,QAAS,GAET/B,MAAM6F,GACJ,MAAO,IACF/E,QACA+E,IAGPxD,MAAMA,GACJ,OAAOvB,KAAKd,MAAM,CAAE+B,QAAS,IAAIjB,KAAKiB,QAASM,MAAWA,EAAMjB,UAElEd,UAAUA,GACR,OAAOQ,KAAKd,MAAM,CAChByB,QAAS,IACJX,KAAKW,QACRnB,UAAAA,MAINC,UAAUA,EAAWuF,GAAU,GAC7B,OAAOhF,KAAKd,MAAM,CAChByB,QAAS,IACJX,KAAKW,QACRlB,UAAWuF,EAAUvF,EAAYX,EAAIkB,KAAKW,QAAQlB,UAAWA,OAInEe,IAAID,EAAMyE,GAAU,GAClB,GAAIA,EACF,OAAOhF,KAAKd,MAAM,CAAEqB,KAAAA,IACtB,MAAM0E,EAAQjF,KAAKO,KAAK0E,MAAM,KAC9B,OAAOjF,KAAKd,MAAM,CAChBqB,KAAM0E,EAAMtD,OAAS,EACnBsD,EAAM,GAAK1E,EAAO,IAAM0E,EAAM,GAC9BjF,KAAKO,KAAOA,KAGlB2E,QAAQA,EAASF,GAAU,GACzB,OAAOhF,KAAKd,MAAM,CAAEuB,SAAUuE,EAAUE,EAAUpG,EAAIkB,KAAKS,SAAUyE,MAEvE/G,QAAQgH,GACN,OAAOnF,KAAKd,MAAM,CAAEuB,SAAU3B,EAAIkB,KAAKS,SAAU,CAAEtC,QAASgH,GAAgB,QAE9EC,OAAOC,GACL,OAAOrF,KAAK7B,QAAQ,CAAEmH,OAAQD,KAEhCE,QAAQF,GACN,OAAOrF,KAAK7B,QAAQ,CAAEJ,CAACW,GAAgC2G,KAEzDG,KAAKH,GACH,OAAOrF,KAAK7B,QAAQ,CAAEsH,cAAeJ,KAEvCpC,QAAQe,EAASf,GACf,MAAMyC,EAAS,IAAItE,IAAIpB,KAAKY,WAE5B,OADA8E,EAAOzB,IAAID,EAASf,GACbjD,KAAKd,MAAM,CAAE0B,UAAW8E,KAEjCC,QAAQtF,EAAUuF,GAAiB,GACjC,OAAO5F,KAAKd,MAAM,CAAE2B,WAAY+E,EAAQ,CAACvF,GAAY,IAAIL,KAAKa,WAAYR,MAE5EwF,MAAMC,EAAUF,GAAQ,GACtB,OAAO5F,KAAKd,MAAM,CAChB4F,eAAgBc,EAAQ,CAACE,GAAY,IAAI9F,KAAK8E,eAAgBgB,MAGlE9E,YAAYA,EAAa4E,GAAQ,GAC/B,OAAO5F,KAAKd,MAAM,CAChB6B,aAAc6E,EAAQ5E,EAAc,IAAIhB,KAAKe,gBAAiBC,MAGlE+E,OAAOA,EAAgBvF,EAAM,GAAIoC,EAAO,MACtC,IAAIoD,EAAOhG,KAAKQ,IAAIA,GAAK0E,QAAQ,CAAEa,OAAAA,IAEnC,MAAME,EAAc/H,EAAmB8H,EAAKvF,SAAStC,SAC/C+H,EAA0B,iBAATtD,KAAuBoD,EAAKvF,SAAStC,UAAY8H,GAAetH,EAAiBsH,IAKxG,OAJAD,EACGpD,EACCsD,EAAUF,EAAKrC,KAAKf,EAAMqD,GACxBD,EAAKpD,KAAKA,GAFNoD,EAGH3F,EACL2F,EACGlB,eACAJ,QAAO,CAAC7C,EAAaC,IAASA,EAAKD,EAAKA,EAAItB,KAAMsB,EAAIpB,WAAWuF,KAGxE7C,IAAI3C,EAAM,IACR,OAAOR,KAAK+F,OAAO,MAAOvF,IAE5B2F,OAAO3F,EAAM,IACX,OAAOR,KAAK+F,OAAO,SAAUvF,IAE/B4F,IAAIxD,EAAMpC,EAAM,IACd,OAAOR,KAAK+F,OAAO,MAAOvF,EAAKoC,IAEjCyD,KAAKzD,EAAMpC,EAAM,IACf,OAAOR,KAAK+F,OAAO,OAAQvF,EAAKoC,IAElC0D,MAAM1D,EAAMpC,EAAM,IAChB,OAAOR,KAAK+F,OAAO,QAASvF,EAAKoC,IAEnC2D,KAAK/F,EAAM,IACT,OAAOR,KAAK+F,OAAO,OAAQvF,IAE7BE,KAAKF,EAAM,IACT,OAAOR,KAAK+F,OAAO,UAAWvF,IAEhCgG,SACE,OAAOxG,KAAK+F,OAAO/F,KAAKS,SAASsF,SAEnCnD,KAAK6D,GACH,OAAOzG,KAAKd,MAAM,CAAEuB,SAAU,IAAKT,KAAKS,SAAUmC,KAAM6D,MAE1D9C,KAAK+C,EAAUT,GACb,MAAMU,EAAqBzI,EAAmB8B,KAAKS,SAAStC,SAC5D,OAAO6B,KAAKuF,QACVU,GACAtH,EAAiBgI,IAAuBA,GL9RrB,oBKgSnB/D,KAAKgE,KAAKC,UAAUH,MC1PpBI,EAAuD,KAC3D,IAAIxC,EAAU,KACVyC,EAAkB,KACtB,MAAO,CACLvF,cAAclB,EAAQ4E,GACpB6B,EAAkBzG,EAAOK,QAAQjB,SAAS,kBAAmB,CAAEE,SAAS,EAAOC,UAAU,KACpFqF,EAAgB,QAAK6B,IACxB7B,EAAgB,OAAI6B,EAAgBC,QAEtC1C,EAAU,CACR2C,IAAK,KACLrB,QACMtB,EAAQ2C,MACVC,aAAa5C,EAAQ2C,KACrB3C,EAAQ2C,IAAM,SAKtB3G,OAAQ,CACN0G,OAAOG,GACL,OAAOnH,KAAKd,MAAM,CAAEuB,SAAU,IAAKT,KAAKS,SAAUuG,OAAQG,EAAWH,YAGzE3G,SAAU,CACR+G,WAAWC,EAAMF,EAAaJ,GAG5B,OAFAzC,EAAQsB,QACRtB,EAAQ2C,IAAMG,YAAW,IAAMD,EAAWL,SAASO,GAC5CrH,MAETmH,aAAe,MAAO,CAACJ,EAAiB/G,OACxCsH,QAAQ/D,GAAM,OAAOvD,KAAKoC,MAAM,aAAcmB,OCjEpD,SAASgE,EACPC,EACAC,GAAgC,EAChCnI,EACAuE,EAAWvE,EAAOI,SAAS,WAAY,CAAEG,UAAU,IACnD6H,EAAY,IA0BZ,OAxBArJ,OAAOC,QAAQkJ,GAAYlG,SAAQ,EAAEqG,EAAK/I,MACxC,IAAIgJ,EAAUF,EAAUhD,QAAO,CAAC7C,EAAKgG,IACnChG,EAAM,GAAGA,KAAOgG,KAAcA,GAC7B,MAEH,GADAD,EAAUA,EAAU,GAAGA,KAAWD,KAASA,EACvC/I,aAAiBS,MACnB,IAAK,MAAMyI,KAAQlJ,EACjBiF,EAASkE,OAAOH,EAASE,QAE3BL,GACiB,iBAAV7I,GAEH6I,aAAqBpI,OACtBoI,EAAUO,SAASL,GAOtB9D,EAASkE,OAAOH,EAAShJ,GAJX,OAAVA,GACF2I,EAAgB3I,EAAO6I,EAAWnI,EAAQuE,EAAU,IAAI6D,EAAWC,OAOlE9D,EAuBT,MAAMA,EAAuC,CAC3CvD,OAAQ,CACNuD,SAAS2D,EAAYC,GAAY,GAC/B,OAAOzH,KAAK4C,KAAK2E,EAAgBC,EAAYC,EAAWzH,KAAKW,aC1DnE,SAASsH,EAAiBN,EAAa/I,GACrC,OAAOsJ,mBAAmBP,GACxB,IACAO,mBACmB,iBAAVtJ,EACLgI,KAAKC,UAAUjI,GACf,GAAKA,GAkCb,MAAMuJ,EAAqC,CACzC7H,OAAQ,CACN6H,QAAQC,GACN,OAAOpI,KACJ4C,KAAsB,iBAAVwF,EAAqBA,GAnClBZ,EAmCyCY,EAlCxD/J,OAAOgK,KAAKb,GAChBc,KAAIX,IACH,MAAM/I,EAAQ4I,EAAWG,GACzB,OAAI/I,aAAiBS,MACZT,EAAM0J,KAAIC,GAAKN,EAAiBN,EAAKY,KAAIC,KAAK,KAEhDP,EAAiBN,EAAK/I,MAE9B4J,KAAK,OA2BDjD,QAAQ,qCApCjB,IAAwBiC,KCTlBiB,EAAU,CAACnK,EAAS8E,EAAM0C,EAAU4C,KACxC,IAAKpK,EAAQqK,iBACX,OAAO,EACT,MAAMC,EAAUtK,EAAQqK,iBAAiBvF,GACzC,SAAIwF,GAAWA,EAAQjH,OAAS,KAC9BmE,EAAS8C,EAAQC,UAAU,IACvBH,EAAaI,eACfJ,EAAaI,cAAc1F,GAC7B2F,EAAMC,UAAU7C,OAAO/C,GAEnB2F,EAAMC,UAAUC,KAAO,IACzBF,EAAMG,SAASC,aACXT,EAAaU,sBACfV,EAAaU,yBAGV,IAkBLL,EAAQ,CACZC,UAAW,IAAI5H,IACf8H,SAAU,KACVG,QAAS,CAACjG,EAAM0C,EAAUxG,KACxB,IAAK8D,IAAS0C,EACZ,OAEF,MAAM4C,EAAepJ,EAAOI,SAAS,cAAe,CAAEE,SAAS,IApB9C,EAAC8I,EAAcY,MAC7BP,EAAMG,UAAYR,GAAgBY,IACrCP,EAAMG,SAAW,IAAII,GAAUhL,IAC7ByK,EAAMC,UAAU1H,SAAQ,CAACwE,EAAU1C,KACjCqF,EAAQnK,EAAS8E,EAAM0C,EAAU4C,SAGjCA,EAAaU,sBACfV,EAAaU,wBAEVL,EAAMG,UAaNK,CAAab,EAFApJ,EAAOI,SAAS,sBAAuB,CAAEE,SAAS,OAK/D6I,EAAQC,EAActF,EAAM0C,EAAU4C,KACrCK,EAAMC,UAAUC,KAAO,GACzBF,EAAMG,SAASG,QAAQ,CAAEG,WAAY,CAAC,WAAY,aACpDT,EAAMC,UAAU/E,IAAIb,EAAM0C,OAwB1B2D,EAAgD,KAAO,CAC3DpJ,SAAU,CACRoJ,MAAMlG,GAEJ,OADAvD,KAAKyB,aAAaa,MAAKvC,GAAOgJ,EAAMM,QAAQtJ,EAAIS,IAAK+C,EAAIvD,KAAK0D,cAAc/C,WAAUwB,OAAM,SACrFnC,SC/EP0J,EAAoB,CAAClJ,EAAamJ,EAAqB3E,EAAkB1F,KAC7E,IAAIsK,EAEJ,GAAkB,iBAAPD,EACTC,EAAcD,MACT,CACL,MAAME,EAAMvK,EAAOI,SAAS,kBAAmB,CAAEG,UAAU,IAC3D,IAAK,MAAM8H,KAAOgC,EAChB,GAAIA,EAAGhC,aAAgBtI,MACrB,IAAK,MAAMyK,KAAOH,EAAGhC,GACnBkC,EAAI9B,OAAOJ,EAAKmC,QAElBD,EAAI9B,OAAOJ,EAAKgC,EAAGhC,IAGvBiC,EAAcC,EAAIE,WAGpB,MAAM9E,EAAQzE,EAAIyE,MAAM,KAExB,OAAK2E,EAGD5E,GAAWC,EAAMtD,OAAS,EACrBsD,EAAM,GAAK,IAAM2E,EAEnBpJ,EAAM,IAAMoJ,EALV5E,EAAUC,EAAM,GAAKzE,GA0C1BoJ,EAA6C,CACjDtJ,OAAQ,CACN0J,MAAML,EAAI3E,GAAU,GAClB,OAAOhF,KAAKd,MAAM,CAAEqB,KAAMmJ,EAAkB1J,KAAKO,KAAMoJ,EAAI3E,EAAShF,KAAKW,cChE/E,SAASsJ,EAAQ1J,EAAO,GAAIE,EAAW,IACrC,OAAOoE,EACJ3F,MAAM,CAAEqB,KAAAA,EAAME,SAAAA,IACdc,MAAM2I,KACN3I,MAAM4I,GACN5I,MAAM6I,GACN7I,MAAM8I,KACN9I,MAAM+I,UAGXL,EAAiB,QAAIA,EACrBA,EAAQ1K,kBTkBoBA,EAAeyF,GAAU,GACnD1F,EAAOC,SAAWyF,EAAUzF,EAAWT,EAAIQ,EAAOC,SAAUA,ISlB9D0K,EAAQzK,UTsCF,SAAuBA,GAC3BF,EAAOE,UAAYA,GStCrByK,EAAQxK,mBT4BqBA,EAAgBuF,GAAU,GACrD1F,EAAOG,UAAYuF,EAAUvF,EAAYX,EAAIQ,EAAOG,UAAWA"}