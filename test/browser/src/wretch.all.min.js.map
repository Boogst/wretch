{"version":3,"file":"wretch.all.min.js","sources":["../../../src/constants.ts","../../../src/utils.ts","../../../src/config.ts","../../../src/resolver.ts","../../../src/middleware.ts","../../../src/core.ts","../../../src/addons/abort.ts","../../../src/addons/formData.ts","../../../src/addons/formUrl.ts","../../../src/addons/perfs.ts","../../../src/addons/queryString.ts","../../../src/index.all.ts"],"sourcesContent":["export const JSON_MIME = \"application/json\"\nexport const CONTENT_TYPE_HEADER = \"Content-Type\"\nexport const FETCH_ERROR = Symbol()","import { CONTENT_TYPE_HEADER } from \"./constants.js\"\n\nexport function extractContentType(headers: HeadersInit = {}): string | undefined {\n  return Object.entries(headers).find(([k]) =>\n    k.toLowerCase() === CONTENT_TYPE_HEADER.toLowerCase()\n  )?.[1]\n}\n\nexport function isLikelyJsonMime(value: string): boolean {\n  return /^application\\/.*json.*/.test(value)\n}\n\nexport const mix = function (one: object, two: object, mergeArrays: boolean = false) {\n  return Object.entries(two).reduce((acc, [key, newValue]) => {\n    const value = one[key]\n    if (Array.isArray(value) && Array.isArray(newValue)) {\n      acc[key] = mergeArrays ? [...value, ...newValue] : newValue\n    } else if (typeof value === \"object\" && typeof newValue === \"object\") {\n      acc[key] = mix(value, newValue, mergeArrays)\n    } else {\n      acc[key] = newValue\n    }\n\n    return acc\n  }, { ...one })\n}\n","import { mix } from \"./utils.js\"\n\ndeclare const global\n\nconst config = {\n  // Default options\n  options: {},\n  // Error type\n  errorType: \"text\",\n  // Polyfills\n  polyfills: {\n    // fetch: null,\n    // FormData: null,\n    // URLSearchParams: null,\n    // performance: null,\n    // PerformanceObserver: null,\n    // AbortController: null\n  },\n  polyfill(p: string, doThrow: boolean = true, instance: boolean = false, ...args: any[]) {\n    const res = this.polyfills[p] ||\n      (typeof self !== \"undefined\" ? self[p] : null) ||\n      (typeof global !== \"undefined\" ? global[p] : null)\n    if (doThrow && !res) throw new Error(p + \" is not defined\")\n    return instance && res ? new res(...args) : res\n  }\n}\nexport type Config = typeof config\n\n/**\n * Sets the default fetch options used when creating a Wretch instance.\n * @param options New default options\n * @param replace If true, completely replaces the existing options instead of mixing in\n */\nexport function setOptions(options: any, replace = false) {\n  config.options = replace ? options : mix(config.options, options)\n}\n\n/**\n * Sets the global polyfills which will be used for every subsequent calls.\n *\n * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n *\n * @param polyfills An object containing the polyfills\n * @param replace If true, replaces the current polyfills instead of mixing in\n */\nexport function setPolyfills(polyfills: any, replace = false) {\n  config.polyfills = replace ? polyfills : mix(config.polyfills, polyfills)\n}\n\n/**\n * Sets the default method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n *\n * If null, defaults to \"text\".\n */\nexport function setErrorType(errorType: string) {\n  config.errorType = errorType\n}\n\nexport default config\n","import { Wretch } from \"./core.js\"\nimport { middlewareHelper } from \"./middleware.js\"\nimport { mix } from \"./utils.js\"\nimport type { WretchResponse, WretchErrorCallback } from \"./types.js\"\nimport { FETCH_ERROR } from \"./constants\"\n\nexport class WretchError extends Error { }\n\nexport interface WretchResponseChain<T, Self = unknown> {\n  /**\n   * @private\n   */\n  wretchRequest: Wretch<T, Self>,\n  /**\n   * @private\n   */\n  fetchRequest: Promise<WretchResponse>,\n\n  /**\n   * Retrieves the raw result as a promise.\n   */\n  res: <Result = WretchResponse>(cb?: (type: WretchResponse) => Result) => Promise<Result>,\n  /**\n   * Retrieves the result as a parsed JSON object.\n   */\n  json: <Result = { [key: string]: any }>(cb?: (type: { [key: string]: any }) => Result) => Promise<Result>,\n  /**\n   * Retrieves the result as a Blob object.\n   */\n  blob: <Result = Blob>(cb?: (type: Blob) => Result) => Promise<Result>,\n  /**\n   * Retrieves the result as a FormData object.\n   */\n  formData: <Result = FormData>(cb?: (type: FormData) => Result) => Promise<Result>,\n  /**\n   * Retrieves the result as an ArrayBuffer object.\n   */\n  arrayBuffer: <Result = ArrayBuffer>(cb?: (type: ArrayBuffer) => Result) => Promise<Result>,\n  /**\n   * Retrieves the result as a string.\n   */\n  text: <Result = string>(cb?: (type: string) => Result) => Promise<Result>,\n\n  /**\n   * Catches an http response with a specific error code or name and performs a callback.\n   */\n  error: (this: Self & WretchResponseChain<T, Self>, code: (number | string | symbol), cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches a bad request (http code 400) and performs a callback.\n   */\n  badRequest: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches an unauthorized request (http code 401) and performs a callback.\n   */\n  unauthorized: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches a forbidden request (http code 403) and performs a callback.\n   */\n  forbidden: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches a \"not found\" request (http code 404) and performs a callback.\n   */\n  notFound: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches a timeout (http code 408) and performs a callback.\n   */\n  timeout: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches an internal server error (http code 500) and performs a callback.\n   */\n  internalError: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n  /**\n   * Catches errors thrown when calling the fetch function and performs a callback.\n   */\n  fetchError: (this: Self & WretchResponseChain<T, Self>, cb: WretchErrorCallback<T, Self>) => this,\n}\n\nexport const resolver = <T, Chain>(wretch: Wretch<T, Chain>) => {\n  const {\n    _url: url,\n    _options: opts,\n    _config: config,\n    _catchers: _catchers,\n    _resolvers: resolvers,\n    _middlewares: middlewares,\n    _addons: addons\n  } = wretch\n\n  const catchers = new Map(_catchers)\n  const finalOptions = mix(config.options, opts)\n  addons.forEach(addon => addon.beforeRequest && addon.beforeRequest(wretch, finalOptions))\n  // The generated fetch request\n  const fetchRequest = middlewareHelper(middlewares)(config.polyfill(\"fetch\"))(url, finalOptions)\n  // Throws on an http error\n  const referenceError = new Error()\n  const throwingPromise: Promise<void | WretchResponse> = fetchRequest\n    .catch(error => {\n      throw { __wrap: error }\n    })\n    .then(response => {\n      if (!response.ok) {\n        const err = new WretchError()\n        // Enhance the error object\n        err[\"cause\"] = referenceError\n        err.stack = err.stack + \"\\nCAUSE: \" + referenceError.stack\n        err[\"response\"] = response\n        if (response.type === \"opaque\") {\n          throw err\n        }\n        return response[config.errorType]().then((body: string) => {\n          err.message = body\n          err[config.errorType] = body\n          err[\"status\"] = response.status\n          throw err\n        })\n      }\n      return response\n    })\n  // Wraps the Promise in order to dispatch the error to a matching catcher\n  const catchersWrapper = <T>(promise: Promise<T>): Promise<void | T> => {\n    return promise.catch(err => {\n      const error = err.__wrap || err\n\n      const catcher =\n        err.__wrap && catchers.has(FETCH_ERROR) ? catchers.get(FETCH_ERROR) :\n          (catchers.get(error.status) || catchers.get(error.name))\n\n      if (catcher)\n        return catcher(error, wretch)\n\n      throw error\n    })\n  }\n  // Enforces the proper promise type when a body parsing method is called.\n  type BodyParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Result>\n  const bodyParser: BodyParser = funName => cb => funName ?\n    // If a callback is provided, then callback with the body result otherwise return the parsed body itself.\n    catchersWrapper(throwingPromise.then(_ => _ && _[funName]()).then(_ => cb ? cb(_) : _)) :\n    // No body parsing method - return the response\n    catchersWrapper(throwingPromise.then(_ => cb ? cb(_ as any) : _))\n\n  const responseChain: WretchResponseChain<T> = {\n    wretchRequest: wretch,\n    fetchRequest,\n    res: bodyParser<WretchResponse>(null),\n    json: bodyParser<any>(\"json\"),\n    blob: bodyParser<Blob>(\"blob\"),\n    formData: bodyParser<FormData>(\"formData\"),\n    arrayBuffer: bodyParser<ArrayBuffer>(\"arrayBuffer\"),\n    text: bodyParser<string>(\"text\"),\n    error(errorId, cb) {\n      catchers.set(errorId, cb)\n      return this\n    },\n    badRequest(cb) { return this.error(400, cb) },\n    unauthorized(cb) { return this.error(401, cb) },\n    forbidden(cb) { return this.error(403, cb) },\n    notFound(cb) { return this.error(404, cb) },\n    timeout(cb) { return this.error(408, cb) },\n    internalError(cb) { return this.error(500, cb) },\n    fetchError(cb) { return this.error(FETCH_ERROR, cb) },\n  }\n\n  const enhancedResponseChain: Chain & WretchResponseChain<T, Chain> = addons.reduce((chain, addon) => ({\n    ...chain,\n    ...(addon.resolver as any)\n  }), responseChain)\n\n  return resolvers.reduce((chain, r) => r(chain, wretch), enhancedResponseChain) as (Chain & WretchResponseChain<T, Chain> & Promise<any>)\n}\n","import { WretchOptions } from \"./types.js\"\nimport { WretchResponse } from \"./types.js\"\n\nexport type Middleware = (options?: { [key: string]: any }) => ConfiguredMiddleware\nexport type ConfiguredMiddleware = (next: FetchLike) => FetchLike\nexport type FetchLike = (url: string, opts: WretchOptions) => Promise<WretchResponse>\n\nexport const middlewareHelper = (middlewares: ConfiguredMiddleware[]) => (fetchFunction: FetchLike): FetchLike => {\n  return middlewares.reduceRight((acc, curr) => curr(acc), fetchFunction) || fetchFunction\n}\n","import { mix, extractContentType, isLikelyJsonMime } from \"./utils.js\"\nimport { JSON_MIME, CONTENT_TYPE_HEADER } from \"./constants.js\"\nimport { resolver } from \"./resolver.js\"\nimport config from \"./config.js\"\nimport type { Config } from \"./config.js\"\nimport type { WretchError, WretchOptions, WretchDeferredCallback, WretchAddon } from \"./types.js\"\nimport type { WretchResponseChain } from \"./resolver.js\"\nimport type { ConfiguredMiddleware } from \"./middleware.js\"\n\n/**\n * The Wretch object used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretch object.\n */\nexport interface Wretch<Self = unknown, Chain = unknown> {\n  /**\n   * @private\n   */\n  _url: string,\n  /**\n   * @private\n   */\n  _options: WretchOptions,\n  /**\n   * @private\n   */\n  _config: Config,\n  /**\n   * @private\n   */\n  _catchers: Map<number | string | symbol, (error: WretchError, originalRequest: Wretch<Self>) => void>\n  /**\n   * @private\n   */\n  _resolvers: ((resolver: Chain & WretchResponseChain<Self, Chain>, originalRequest: Wretch<Self>) => any)[]\n  /**\n   * @private\n   */\n  _deferred: WretchDeferredCallback<Self, Chain>[]\n  /**\n   * @private\n   */\n  _middlewares: ConfiguredMiddleware[]\n  /**\n   * @private\n   */\n  _addons: WretchAddon<unknown, Chain>[]\n\n  /**\n   * Register an Addon to enhance the wretch or response objects.\n   */\n  addon: <W, R>(addon: WretchAddon<W, R>) => W & Self & Wretch<Self & W, Chain & R>\n\n  /**\n   * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n   *\n   * Persists for every subsequent requests.\n   *\n   * Default is \"text\".\n   */\n  errorType(this: Self & Wretch<Self, Chain>, method: string): this\n\n  /**\n   * Sets the non-global polyfills which will be used for every subsequent calls.\n   *\n   * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n   *\n   * @param polyfills - An object containing the polyfills\n   * @param replace - If true, replaces the current polyfills instead of mixing in\n   */\n  polyfills(this: Self & Wretch<Self, Chain>, polyfills: Partial<typeof config.polyfills>): this\n\n  /**\n   * Returns a new Wretch object with the argument url appended and the same options.\n   * @param url - Url segment\n   * @param replace - If true, replaces the current url instead of appending\n   */\n  url(this: Self & Wretch<Self, Chain>, url: string, replace?: boolean): this\n\n  /**\n   * Returns a new Wretch object with the same url and new options.\n   * @param options - New options\n   * @param replace - If true, replaces the existing options\n   */\n  options(this: Self & Wretch<Self, Chain>, options: WretchOptions, replace?: boolean): this\n\n  /**\n   * Set request headers.\n   * @param headerValues - An object containing header keys and values\n   */\n  headers(this: Self & Wretch<Self, Chain>, headerValues: HeadersInit): this\n\n  /**\n   * Shortcut to set the \"Accept\" header.\n   * @param headerValue - Header value\n   */\n  accept(this: Self & Wretch<Self, Chain>, headerValue: string): this\n\n  /**\n   * Shortcut to set the \"Content-Type\" header.\n   * @param headerValue - Header value\n   */\n  content(this: Self & Wretch<Self, Chain>, headerValue: string): this\n\n  /**\n   * Shortcut to set the \"Authorization\" header.\n   * @param headerValue - Header value\n   */\n  auth(this: Self & Wretch<Self, Chain>, headerValue: string): this\n\n  /**\n   * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n   * @param errorId - Error code or name\n   * @param catcher - The catcher method\n   */\n  catcher(this: Self & Wretch<Self, Chain>, errorId: number | string, catcher: (error: WretchError, originalRequest: Wretch<Self>) => any): this\n\n  /**\n   * Defer wretch methods that will be chained and called just before the request is performed.\n   */\n  defer(this: Self & Wretch<Self, Chain>, callback: WretchDeferredCallback<Self, Chain>, clear?: boolean): this\n\n  /**\n   * Program a resolver to perform response chain tasks automatically.\n   * @param resolver - Resolver callback\n   */\n  resolve(this: Self & Wretch<Self, Chain>, resolver: (chain: Chain & WretchResponseChain<Self, Chain>, originalRequest: Wretch<Self>) => WretchResponseChain<Self, Chain> | Promise<any>, clear?: boolean): this\n\n  /**\n   * Add middlewares to intercept a request before being sent.\n   */\n  middlewares(this: Self & Wretch<Self, Chain>, middlewares: ConfiguredMiddleware[], clear?: boolean): this\n\n  /**\n   * Sends the request using the accumulated fetch options.\n   */\n  fetch(this: Self & Wretch<Self, Chain>, method?: string, url?: string, body?: any): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a get request.\n   */\n  get(this: Self & Wretch<Self, Chain>, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a delete request.\n   */\n  delete(this: Self & Wretch<Self, Chain>, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a put request.\n   */\n  put(this: Self & Wretch<Self, Chain>, body?: any, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a post request.\n   */\n  post(this: Self & Wretch<Self, Chain>, body?: any, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a patch request.\n   */\n  patch(this: Self & Wretch<Self, Chain>, body?: any, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs a head request.\n   */\n  head(this: Self & Wretch<Self, Chain>, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n  /**\n   * Performs an options request\n   */\n  opts(this: Self & Wretch<Self, Chain>, url?: string, options?: WretchOptions): Chain & WretchResponseChain<Self, Chain>\n\n  /**\n   * Sets the request body with any content.\n   * @param contents - The body contents\n   */\n  body(this: Self & Wretch<Self, Chain>, contents: any): this\n\n  /**\n   * Sets the content type header, stringifies an object and sets the request body.\n   * @param jsObject - An object which will be serialized into a JSON\n   * @param contentType - A custom content type.\n   */\n  json(this: Self & Wretch<Self, Chain>, jsObject: object, contentType?: string): this\n}\n\nexport const core: Wretch = {\n  _url: \"\",\n  _options: {},\n  _config: config,\n  _catchers: new Map(),\n  _resolvers: [],\n  _deferred: [],\n  _middlewares: [],\n  _addons: [],\n  addon(addon) {\n    return { ...this, _addons: [...this._addons, addon], ...addon.wretch }\n  },\n  errorType(errorType: string) {\n    return {\n      ...this,\n      _config: {\n        ...this._config,\n        errorType\n      }\n    }\n  },\n  polyfills(polyfills, replace = false) {\n    return {\n      ...this,\n      _config: {\n        ...this._config,\n        polyfills: replace ? polyfills : mix(this._config.polyfills, polyfills)\n      }\n    }\n  },\n  url(_url, replace = false) {\n    if (replace)\n      return { ...this, _url }\n    const split = this._url.split(\"?\")\n    return {\n      ...this,\n      _url: split.length > 1 ?\n        split[0] + _url + \"?\" + split[1] :\n        this._url + _url\n    }\n  },\n  options(options, replace = false) {\n    return { ...this, _options: replace ? options : mix(this._options, options) }\n  },\n  headers(headerValues) {\n    return { ...this, _options: mix(this._options, { headers: headerValues || {} }) }\n  },\n  accept(headerValue) {\n    return this.headers({ Accept: headerValue })\n  },\n  content(headerValue) {\n    return this.headers({ [CONTENT_TYPE_HEADER]: headerValue })\n  },\n  auth(headerValue) {\n    return this.headers({ Authorization: headerValue })\n  },\n  catcher(errorId, catcher) {\n    const newMap = new Map(this._catchers)\n    newMap.set(errorId, catcher)\n    return { ...this, _catchers: newMap }\n  },\n  resolve(resolver, clear: boolean = false) {\n    return { ...this, _resolvers: clear ? [resolver] : [...this._resolvers, resolver] }\n  },\n  defer(callback, clear = false) {\n    return {\n      ...this,\n      _deferred: clear ? [callback] : [...this._deferred, callback]\n    }\n  },\n  middlewares(middlewares, clear = false) {\n    return {\n      ...this,\n      _middlewares: clear ? middlewares : [...this._middlewares, ...middlewares]\n    }\n  },\n  fetch(method: string = this._options.method, url = \"\", body = null) {\n    let base = this.url(url).options({ method })\n    // \"Jsonify\" the body if it is an object and if it is likely that the content type targets json.\n    const contentType = extractContentType(base._options.headers)\n    const jsonify = typeof body === \"object\" && (!base._options.headers || !contentType || isLikelyJsonMime(contentType))\n    base =\n      !body ? base :\n        jsonify ? base.json(body, contentType) :\n          base.body(body)\n    return resolver(\n      base\n        ._deferred\n        .reduce((acc: Wretch, curr) => curr(acc, acc._url, acc._options), base)\n    )\n  },\n  get(url = \"\") {\n    return this.fetch(\"GET\", url)\n  },\n  delete(url = \"\") {\n    return this.fetch(\"DELETE\", url)\n  },\n  put(body, url = \"\") {\n    return this.fetch(\"PUT\", url, body)\n  },\n  post(body, url = \"\") {\n    return this.fetch(\"POST\", url, body)\n  },\n  patch(body, url = \"\") {\n    return this.fetch(\"PATCH\", url, body)\n  },\n  head(url = \"\") {\n    return this.fetch(\"HEAD\", url)\n  },\n  opts(url = \"\") {\n    return this.fetch(\"OPTIONS\", url)\n  },\n  body(contents) {\n    return { ...this, _options: { ...this._options, body: contents } }\n  },\n  json(jsObject, contentType) {\n    const currentContentType = extractContentType(this._options.headers)\n    return this.content(\n      contentType ||\n      isLikelyJsonMime(currentContentType) && currentContentType ||\n      JSON_MIME\n    ).body(JSON.stringify(jsObject))\n  }\n}","import type { WretchResponseChain } from \"../resolver.js\"\nimport type { Wretch, WretchAddon, WretchErrorCallback } from \"../types.js\"\n\nexport interface AbortWretch {\n  /**\n   * Associates a custom signal with the request.\n   * @param controller - An AbortController\n   */\n  signal: <T extends AbortWretch, C>(this: T & Wretch<T, C>, controller: AbortController) => this\n}\n\nexport interface AbortResolver {\n  /**\n   * Aborts the request after a fixed time.\n   *\n   * @param time - Time in milliseconds\n   * @param controller - A custom controller\n   */\n  setTimeout: <T, C extends AbortResolver>(this: C & WretchResponseChain<T, C>, time: number, controller?: AbortController) => this\n  /**\n   * Returns the automatically generated AbortController alongside the current wretch response as a pair.\n   */\n  controller: <T, C extends AbortResolver>(this: C & WretchResponseChain<T, C>) => [any, this]\n  /**\n   * Catches an AbortError and performs a callback.\n   */\n  onAbort: <T, C extends AbortResolver>(this: C & WretchResponseChain<T, C>, cb: WretchErrorCallback<T, C>) => this\n}\n\n/**\n * Adds the ability to abort requests using AbortController and signals under the hood.\n *\n * ```js\n * import AbortAddon from \"wetch/addons/abort\"\n *\n * wretch().addon(AbortAddon())\n * ```\n */\nconst abort: () => WretchAddon<AbortWretch, AbortResolver> = () => {\n  let timeout = null\n  let fetchController = null\n  return {\n    beforeRequest(wretch, options) {\n      fetchController = wretch._config.polyfill(\"AbortController\", false, true)\n      if (!options[\"signal\"] && fetchController) {\n        options[\"signal\"] = fetchController.signal\n      }\n      timeout = {\n        ref: null,\n        clear() {\n          if (timeout.ref) {\n            clearTimeout(timeout.ref)\n            timeout.ref = null\n          }\n        }\n      }\n    },\n    wretch: {\n      signal(controller) {\n        return { ...this, _options: { ...this._options, signal: controller.signal } }\n      },\n    },\n    resolver: {\n      setTimeout(time, controller = fetchController) {\n        timeout.clear()\n        timeout.ref = setTimeout(() => controller.abort(), time)\n        return this\n      },\n      controller() { return [fetchController, this] },\n      onAbort(cb) { return this.error(\"AbortError\", cb) }\n    },\n  }\n}\n\nexport default abort","import type { Wretch } from \"../core.js\"\nimport type { Config } from \"../config.js\"\nimport type { WretchAddon } from \"../types.js\"\n\nfunction convertFormData(\n  formObject: object,\n  recursive: string[] | boolean = false,\n  config: Config,\n  formData = config.polyfill(\"FormData\", true, true),\n  ancestors = [],\n) {\n  Object.entries(formObject).forEach(([key, value]) => {\n    let formKey = ancestors.reduce((acc, ancestor) => (\n      acc ? `${acc}[${ancestor}]` : ancestor\n    ), null)\n    formKey = formKey ? `${formKey}[${key}]` : key\n    if (value instanceof Array) {\n      for (const item of value)\n        formData.append(formKey, item)\n    } else if (\n      recursive &&\n      typeof value === \"object\" &&\n      (\n        !(recursive instanceof Array) ||\n        !recursive.includes(key)\n      )\n    ) {\n      if (value !== null) {\n        convertFormData(value, recursive, config, formData, [...ancestors, key])\n      }\n    } else {\n      formData.append(formKey, value)\n    }\n  })\n\n  return formData\n}\n\nexport interface FormDataAddon {\n  /**\n   * Converts the javascript object to a FormData and sets the request body.\n   * @param formObject - An object which will be converted to a FormData\n   * @param recursive - If `true`, will recurse through all nested objects\n   * Can be set as an array of string to exclude specific keys.\n   * @see https://github.com/elbywan/wretch/issues/68 for more details.\n   */\n  formData<T extends FormDataAddon, C>(this: T & Wretch<T, C>, formObject: object, recursive?: string[] | boolean): this\n}\n\n/**\n * Adds the ability to convert a an object to a FormData and use it as a request body.\n *\n * ```js\n * import FormDataAddon from \"wretch/addons/formData\"\n *\n * wretch().addon(FormDataAddon)\n * ```\n */\nconst formData: WretchAddon<FormDataAddon> = {\n  wretch: {\n    formData(formObject, recursive = false) {\n      return this.body(convertFormData(formObject, recursive, this._config))\n    }\n  }\n}\n\nexport default formData","import type { Wretch } from \"../core.js\"\nimport type { WretchAddon } from \"../types.js\"\n\nfunction encodeQueryValue(key: string, value: unknown) {\n  return encodeURIComponent(key) +\n    \"=\" +\n    encodeURIComponent(\n      typeof value === \"object\" ?\n        JSON.stringify(value) :\n        \"\" + value\n    )\n}\nfunction convertFormUrl(formObject: object) {\n  return Object.keys(formObject)\n    .map(key => {\n      const value = formObject[key]\n      if (value instanceof Array) {\n        return value.map(v => encodeQueryValue(key, v)).join(\"&\")\n      }\n      return encodeQueryValue(key, value)\n    })\n    .join(\"&\")\n}\n\nexport interface FormUrlAddon {\n  /**\n   * Converts the input to an url encoded string and sets the content-type header and body.\n   * If the input argument is already a string, skips the conversion part.\n   *\n   * @param input - An object to convert into an url encoded string or an already encoded string\n   */\n  formUrl<T extends FormUrlAddon, C>(this: T & Wretch<T, C>, input: (object | string)): this\n}\n\n/**\n * Adds the ability to convert a an object to a FormUrl and use it as a request body.\n *\n * ```js\n * import FormUrlAddon from \"wretch/addons/formUrl\"\n *\n * wretch().addon(FormUrlAddon)\n * ```\n */\nconst formUrl: WretchAddon<FormUrlAddon> = {\n  wretch: {\n    formUrl(input) {\n      return this\n        .body(typeof input === \"string\" ? input : convertFormUrl(input))\n        .content(\"application/x-www-form-urlencoded\")\n    }\n  }\n}\n\nexport default formUrl","import type { WretchResponseChain } from \"../resolver.js\"\nimport type { WretchAddon } from \"../types.js\"\n\nconst onMatch = (entries, name, callback, _performance) => {\n  if (!entries.getEntriesByName)\n    return false\n  const matches = entries.getEntriesByName(name)\n  if (matches && matches.length > 0) {\n    callback(matches.reverse()[0])\n    if (_performance.clearMeasures)\n      _performance.clearMeasures(name)\n    utils.callbacks.delete(name)\n\n    if (utils.callbacks.size < 1) {\n      utils.observer.disconnect()\n      if (_performance.clearResourceTimings) {\n        _performance.clearResourceTimings()\n      }\n    }\n    return true\n  }\n  return false\n}\n\nconst lazyObserver = (_performance, _observer) => {\n  if (!utils.observer && _performance && _observer) {\n    utils.observer = new _observer(entries => {\n      utils.callbacks.forEach((callback, name) => {\n        onMatch(entries, name, callback, _performance)\n      })\n    })\n    if (_performance.clearResourceTimings)\n      _performance.clearResourceTimings()\n  }\n  return utils.observer\n}\n\nconst utils = {\n  callbacks: new Map(),\n  observer: null,\n  observe: (name, callback, config) => {\n    if (!name || !callback)\n      return\n\n    const _performance = config.polyfill(\"performance\", false)\n    const _observer = config.polyfill(\"PerformanceObserver\", false)\n\n    if (!lazyObserver(_performance, _observer))\n      return\n\n    if (!onMatch(_performance, name, callback, _performance)) {\n      if (utils.callbacks.size < 1)\n        utils.observer.observe({ entryTypes: [\"resource\", \"measure\"] })\n      utils.callbacks.set(name, callback)\n    }\n\n  }\n}\n\nexport interface PerfsAddon {\n  /**\n   * Performs a callback on the API performance timings of the request.\n   *\n   * Warning: Still experimental on browsers and node.js\n   */\n  perfs: <T, C extends PerfsAddon>(this: C & WretchResponseChain<T, C>, cb?: (timing: any) => void) => this,\n}\n\n/**\n * Adds the ability to measure requests using the Performance Timings API.\n *\n * ```js\n * import PerfsAddon from \"wretch/addons/perfs\"\n *\n * wretch().addon(PerfsAddon())\n * ```\n */\nconst perfs: () => WretchAddon<unknown, PerfsAddon> = () => ({\n  resolver: {\n    perfs(cb) {\n      this.fetchRequest.then(res => utils.observe(res.url, cb, this.wretchRequest._config)).catch(() => {/* swallow */ })\n      return this\n    },\n  }\n})\n\nexport default perfs","import type { Wretch, Config, WretchAddon } from \"../types.js\"\n\nconst appendQueryParams = (url: string, qp: object | string, replace: boolean, config: Config) => {\n  let queryString: string\n\n  if (typeof qp === \"string\") {\n    queryString = qp\n  } else {\n    const usp = config.polyfill(\"URLSearchParams\", true, true)\n    for (const key in qp) {\n      if (qp[key] instanceof Array) {\n        for (const val of qp[key])\n          usp.append(key, val)\n      } else {\n        usp.append(key, qp[key])\n      }\n    }\n    queryString = usp.toString()\n  }\n\n  const split = url.split(\"?\")\n\n  if (!queryString)\n    return replace ? split[0] : url\n\n  if (replace || split.length < 2)\n    return split[0] + \"?\" + queryString\n\n  return url + \"&\" + queryString\n}\n\nexport interface QueryStringAddon {\n  /**\n   * Converts a javascript object to query parameters,\n   * then appends this query string to the current url.\n   *\n   * If given a string, use the string as the query verbatim.\n   *\n   * ```\n   * import QueryAddon from \"wretch/addons/queryString\"\n   *\n   * let w = wretch(\"http://example.com\").addon(QueryAddon) // url is http://example.com\n   *\n   * // Chain query calls\n   * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n   * w = w.query(\"foo-bar-baz-woz\") // url is now http://example.com?a=1&b=2&foo-bar-baz-woz\n   *\n   * // Pass true as the second argument to replace existing query parameters\n   * w = w.query(\"c=3&d=4\", true) // url is now http://example.com?c=3&d=4\n   * ```\n   *\n   * @param qp - An object which will be converted, or a string which will be used verbatim.\n   */\n  query<T extends QueryStringAddon, C>(this: T & Wretch<T, C>, qp: object | string, replace?: boolean): this\n}\n\n/**\n * Adds the ability to append query parameters from a javascript object.\n *\n * ```js\n * import QueryAddon from \"wretch/addons/queryString\"\n *\n * wretch().addon(QueryAddon)\n * ```\n */\nconst queryString: WretchAddon<QueryStringAddon> = {\n  wretch: {\n    query(qp, replace = false) {\n      return { ...this, _url: appendQueryParams(this._url, qp, replace, this._config) }\n    }\n  }\n}\n\nexport default queryString","import { setOptions, setErrorType, setPolyfills } from \"./config.js\"\nimport { core } from \"./core.js\"\nimport * as Addons from \"./addons/index.js\"\n\nfunction factory(_url = \"\", _options = {}) {\n  return { ...core, _url, _options }\n    .addon(Addons.abortAddon())\n    .addon(Addons.formDataAddon)\n    .addon(Addons.formUrlAddon)\n    .addon(Addons.perfsAddon())\n    .addon(Addons.queryStringAddon)\n}\n\nfactory[\"default\"] = factory\nfactory.options = setOptions\nfactory.errorType = setErrorType\nfactory.polyfills = setPolyfills\nexport default factory"],"names":["CONTENT_TYPE_HEADER","FETCH_ERROR","Symbol","extractContentType","headers","_a","Object","entries","find","k","toLowerCase","isLikelyJsonMime","value","test","mix","one","two","mergeArrays","reduce","acc","key","newValue","Array","isArray","config","options","errorType","polyfills","polyfill","p","doThrow","instance","args","res","this","self","global","Error","WretchError","resolver","wretch","_url","url","_options","opts","_config","_catchers","_resolvers","resolvers","_middlewares","middlewares","_addons","addons","catchers","Map","finalOptions","forEach","addon","beforeRequest","fetchRequest","fetchFunction","reduceRight","curr","middlewareHelper","referenceError","throwingPromise","catch","error","__wrap","then","response","ok","err","stack","type","body","message","status","bodyParser","funName","cb","_","catcher","has","get","name","responseChain","wretchRequest","json","blob","formData","arrayBuffer","text","errorId","set","badRequest","unauthorized","forbidden","notFound","timeout","internalError","fetchError","enhancedResponseChain","chain","r","core","_deferred","replace","split","length","headerValues","accept","headerValue","Accept","content","auth","Authorization","newMap","resolve","clear","defer","callback","fetch","method","base","contentType","jsonify","delete","put","post","patch","head","contents","jsObject","currentContentType","JSON","stringify","abort","fetchController","signal","ref","clearTimeout","controller","setTimeout","time","onAbort","convertFormData","formObject","recursive","ancestors","formKey","ancestor","item","append","includes","encodeQueryValue","encodeURIComponent","formUrl","input","keys","map","v","join","onMatch","_performance","getEntriesByName","matches","reverse","clearMeasures","utils","callbacks","size","observer","disconnect","clearResourceTimings","observe","_observer","lazyObserver","entryTypes","perfs","appendQueryParams","qp","queryString","usp","val","toString","query","factory","Addons.abortAddon","Addons.formDataAddon","Addons.formUrlAddon","Addons.perfsAddon","Addons.queryStringAddon"],"mappings":"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"}